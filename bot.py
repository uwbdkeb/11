import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ (—Å–æ–∑–¥–∞–π—Ç–µ .env —Å BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω)
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class DriverStates(StatesGroup):
    waiting_for_phone = State()
    main_menu = State()

    # –í–æ–¥–∏—Ç–µ–ª–∏
    drivers_list = State()
    select_car = State()
    start_shift = State()
    enter_mileage_start = State()
    upload_mileage_photo = State()
    upload_fuel_gas_photo = State()
    upload_oil_coolant_photo = State()
    upload_interior_photo = State()

    # –ó–∞–≥—Ä—É–∑–∫–∞
    loading_list = State()
    loading_finished = State()

    # –î–æ—Å—Ç–∞–≤–∫–∞
    delivery_list = State()
    at_location = State()
    delivery_canceled = State()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
    end_shift_mileage = State()
    end_shift_photo = State()

    # –°—Ç–æ—è–Ω–∫–∞
    parking_mileage_photo = State()
    parking_fuel_gas_photo = State()
    parking_interior_photo = State()
    parking_general_photo = State()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–í–æ–¥–∏—Ç–µ–ª–∏ –ö"))
    builder.row(types.KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞ –ö"))
    builder.row(types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏"))
    builder.row(types.KeyboardButton(text="–°—Ç–æ—è–Ω–∫–∞ –ö"))
    return builder.as_markup(resize_keyboard=True)


# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(DriverStates.waiting_for_phone)


# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
@dp.message(DriverStates.waiting_for_phone)
async def phone_auth(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.isdigit() and '@' not in phone and '+' not in phone:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    await state.set_state(DriverStates.main_menu)


# --- –í–æ–¥–∏—Ç–µ–ª–∏ –ö ---
@dp.message(lambda msg: msg.text == "–í–æ–¥–∏—Ç–µ–ª–∏ –ö")
async def drivers_menu(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"))
    builder.row(types.KeyboardButton(text="–í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"))
    builder.row(types.KeyboardButton(text="–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –ö"))
    builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("üìã –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª–µ–π:", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(DriverStates.drivers_list)


@dp.message(lambda msg: msg.text == "–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
async def confirm_drivers(message: types.Message):
    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


@dp.message(lambda msg: msg.text == "–í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
async def select_car_prompt(message: types.Message, state: FSMContext):
    await message.answer("üöò –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
    await state.set_state(DriverStates.select_car)


@dp.message(DriverStates.select_car)
async def car_selected(message: types.Message, state: FSMContext):
    car = message.text
    await message.answer(f"‚úÖ –ú–∞—à–∏–Ω–∞ {car} –≤—ã–±—Ä–∞–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    await state.set_state(DriverStates.main_menu)


@dp.message(lambda msg: msg.text == "–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –ö")
async def start_shift(message: types.Message, state: FSMContext):
    await message.answer("üöó –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ (–≤ –∫–º):")
    await state.set_state(DriverStates.enter_mileage_start)


@dp.message(DriverStates.enter_mileage_start)
async def enter_mileage_start(message: types.Message, state: FSMContext):
    try:
        mileage = int(message.text)
        await state.update_data(mileage_start=mileage)
        await message.answer("üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–µ–≥ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ):")
        await state.set_state(DriverStates.upload_mileage_photo)
    except ValueError:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


@dp.message(DriverStates.upload_mileage_photo, F.photo)
async def upload_mileage_photo(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ–±–µ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    await message.answer("‚õΩ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–Ω–∑–∏–Ω–∞/–≥–∞–∑–∞ (2 —Ñ–æ—Ç–æ):")
    await state.set_state(DriverStates.upload_fuel_gas_photo)


@dp.message(DriverStates.upload_fuel_gas_photo, F.photo)
async def upload_fuel_gas_photo(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –§–æ—Ç–æ –±–µ–Ω–∑–∏–Ω–∞/–≥–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    await message.answer("üõ¢Ô∏è –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞ –∏ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑–∞:")
    await state.set_state(DriverStates.upload_oil_coolant_photo)


@dp.message(DriverStates.upload_oil_coolant_photo, F.photo)
async def upload_oil_coolant_photo(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –§–æ—Ç–æ –º–∞—Å–ª–∞ –∏ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    await message.answer("üßº –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–∞–ª–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(DriverStates.upload_interior_photo)


@dp.message(DriverStates.upload_interior_photo, F.photo)
async def upload_interior_photo(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –§–æ—Ç–æ —Å–∞–ª–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    await message.answer("‚úÖ –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    await state.set_state(DriverStates.main_menu)


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ö ---
@dp.message(lambda msg: msg.text == "–ó–∞–≥—Ä—É–∑–∫–∞ –ö")
async def loading_menu(message: types.Message, state: FSMContext):
    orders = ["#1001 - –¢–æ–≤–∞—Ä A", "#1002 - –¢–æ–≤–∞—Ä B", "#1003 - –¢–æ–≤–∞—Ä C"]
    builder = ReplyKeyboardBuilder()
    for order in orders:
        builder.row(types.KeyboardButton(text=f"{order} ‚úÖ"))
    builder.row(types.KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –ö"))
    builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("üì¶ –û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(DriverStates.loading_list)


@dp.message(lambda msg: "‚úÖ" in msg.text and "#" in msg.text)
async def mark_loaded(message: types.Message):
    await message.answer(f"‚úîÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {message.text.split(' ‚úÖ')[0]}")


@dp.message(lambda msg: msg.text == "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –ö")
async def loading_finished(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    # –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–ù–∞ –º–µ—Å—Ç–µ –ö"),
        types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞ –ö")
    )
    builder.row(
        types.KeyboardButton(text="–ü–æ–¥—ä–µ–º –ö"),
        types.KeyboardButton(text="–û–∂–∏–¥–∞–Ω–∏–µ –ö")
    )
    builder.row(
        types.KeyboardButton(text="–û–ø–ª–∞—Ç–∞ –ö")
    )
    builder.row(
        types.KeyboardButton(text="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ö"),
        types.KeyboardButton(text="–ó–≤–æ–Ω–æ–∫ –ö"),
        types.KeyboardButton(text="–í–æ—Ç—Å–∞–ø –ö")
    )
    builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(DriverStates.delivery_list)


# --- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ ---
@dp.message(lambda msg: msg.text == "–ù–∞ –º–µ—Å—Ç–µ –ö")
async def at_location(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ö"))
    builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("üìç –í—ã –Ω–∞ –º–µ—Å—Ç–µ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(DriverStates.at_location)


@dp.message(lambda msg: msg.text == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ö")
async def delivery_completed(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await message.answer("üì¶ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã.", reply_markup=get_main_keyboard())


@dp.message(lambda msg: msg.text == "–û—Ç–º–µ–Ω–∞ –ö")
async def cancellation_menu(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–û—Ç–∫–∞–∑ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ö"))
    builder.row(types.KeyboardButton(text="–ü–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã –ö"))
    builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(DriverStates.delivery_canceled)


@dp.message(lambda msg: "–û—Ç–∫–∞–∑" in msg.text or "–ü–µ—Ä–µ–Ω–æ—Å" in msg.text)
async def cancellation_reason(message: types.Message, state: FSMContext):
    await message.answer(f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: {message.text}")
    await message.answer("üì¶ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.", reply_markup=get_main_keyboard())
    await state.set_state(DriverStates.main_menu)


# --- –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É ---
@dp.message(lambda msg: msg.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É –ö")
async def end_shift(message: types.Message, state: FSMContext):
    await message.answer("üèÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–±–µ–≥ (–≤ –∫–º):")
    await state.set_state(DriverStates.end_shift_mileage)


@dp.message(DriverStates.end_shift_mileage)
async def end_shift_mileage(message: types.Message, state: FSMContext):
    try:
        mileage = int(message.text)
        await state.update_data(mileage_end=mileage)
        await message.answer("üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–±–µ–≥:")
        await state.set_state(DriverStates.end_shift_photo)
    except ValueError:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


@dp.message(DriverStates.end_shift_photo, F.photo)
async def end_shift_photo(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –ü—Ä–æ–±–µ–≥ –∏ —Ñ–æ—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã. –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await message.answer("üöó –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–æ—è–Ω–∫–µ:", reply_markup=get_parking_keyboard())
    await state.set_state(DriverStates.parking_mileage_photo)


# --- –°—Ç–æ—è–Ω–∫–∞ –ö ---
def get_parking_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–§–æ—Ç–æ –ø—Ä–æ–±–µ–≥–∞"))
    builder.row(types.KeyboardButton(text="–§–æ—Ç–æ –±–µ–Ω–∑–∏–Ω/–≥–∞–∑"))
    builder.row(types.KeyboardButton(text="–§–æ—Ç–æ —Å–∞–ª–æ–Ω–∞"))
    builder.row(types.KeyboardButton(text="–û–±—â–µ–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"))
    builder.row(types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ"))
    return builder.as_markup(resize_keyboard=True)


@dp.message(lambda msg: msg.text == "–°—Ç–æ—è–Ω–∫–∞ –ö")
async def parking_menu(message: types.Message, state: FSMContext):
    await message.answer("üì∏ –°—Ç–æ—è–Ω–∫–∞: –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.", reply_markup=get_parking_keyboard())
    await state.set_state(DriverStates.parking_mileage_photo)


@dp.message(lambda msg: msg.text == "–§–æ—Ç–æ –ø—Ä–æ–±–µ–≥–∞")
async def parking_mileage(message: types.Message):
    await message.answer("üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–µ–≥:")


@dp.message(lambda msg: msg.text == "–§–æ—Ç–æ –±–µ–Ω–∑–∏–Ω/–≥–∞–∑")
async def parking_fuel_gas(message: types.Message):
    await message.answer("‚õΩ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –±–µ–Ω–∑–∏–Ω/–≥–∞–∑:")


@dp.message(lambda msg: msg.text == "–§–æ—Ç–æ —Å–∞–ª–æ–Ω–∞")
async def parking_interior(message: types.Message):
    await message.answer("üõãÔ∏è –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–∞–ª–æ–Ω:")


@dp.message(lambda msg: msg.text == "–û–±—â–µ–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
async def parking_general(message: types.Message):
    await message.answer("üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å–Ω–∞—Ä—É–∂–∏:")


@dp.message(lambda msg: msg.text == "–ì–æ—Ç–æ–≤–æ")
async def parking_done(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –í—Å–µ —Ñ–æ—Ç–æ —Å—Ç–æ—è–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω–µ!")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    await state.set_state(DriverStates.main_menu)


# --- –ù–∞–∑–∞–¥ ---
@dp.message(lambda msg: msg.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    await state.set_state(DriverStates.main_menu)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.run_polling(bot)
