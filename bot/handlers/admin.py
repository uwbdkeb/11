from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from bot.states.driver_states import AdminState
from bot.keyboards.reply import get_main_menu, get_cancel_menu, get_admin_menu
from bot.keyboards.inline import get_vehicle_assignment_keyboard
from bot.utils.database import Database
from bot.utils.validators import validate_phone_number
from bot.config import Config

router = Router()
db = Database()
config = Config()

@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    user_id = message.from_user.id
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    await message.answer(f"üîç –í–∞—à ID: {user_id}\n–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    if not config.is_admin(user_id):
        await message.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            f"–í–∞—à ID: {user_id}\n"
            f"–ê–¥–º–∏–Ω—Å–∫–∏–µ ID: {config.admin_ids}"
        )
        return
    
    await message.answer(
        "üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_admin_menu()
    )

@router.message(lambda message: message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è")
async def add_driver_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_menu())
        return
    
    await message.answer(
        "üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=get_cancel_menu()
    )
    
    await state.set_state(AdminState.waiting_for_driver_name)

@router.message(StateFilter(AdminState.waiting_for_driver_name))
async def process_driver_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu())
        await state.clear()
        return
    
    if not message.text or len(message.text.strip()) < 2:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
            reply_markup=get_cancel_menu()
        )
        return
    
    driver_name = message.text.strip()
    await state.update_data(driver_name=driver_name)
    
    await message.answer(
        f"‚úÖ –ò–º—è: {driver_name}\n\n"
        "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:\n"
        "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
        reply_markup=get_cancel_menu()
    )
    
    await state.set_state(AdminState.waiting_for_driver_phone)

@router.message(StateFilter(AdminState.waiting_for_driver_phone))
async def process_driver_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu())
        await state.clear()
        return
    
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_cancel_menu()
        )
        return
    
    phone = message.text.strip()
    normalized_phone = validate_phone_number(phone)
    
    if not normalized_phone:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
            reply_markup=get_cancel_menu()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    existing_driver = await db.get_driver_by_phone(normalized_phone)
    if existing_driver:
        await message.answer(
            f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {normalized_phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n"
            f"üë§ {existing_driver['name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_cancel_menu()
        )
        return
    
    await state.update_data(driver_phone=normalized_phone)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    available_vehicles = await db.get_available_vehicles()
    
    data = await state.get_data()
    
    if available_vehicles:
        keyboard = get_vehicle_assignment_keyboard(available_vehicles)
        await message.answer(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n\n"
            f"üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è **{data['driver_name']}**:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await state.set_state(AdminState.waiting_for_vehicle_assignment)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –¢–°
        await create_driver_without_vehicle(message, state, data, normalized_phone)

async def create_driver_without_vehicle(message: types.Message, state: FSMContext, data: dict, phone: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        driver_id = await db.create_driver(
            name=data['driver_name'],
            phone=phone,
            vehicle_id=None
        )
        
        await message.answer(
            f"‚úÖ **–í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üë§ –ò–º—è: {data['driver_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
            f"üÜî ID: {driver_id}\n\n"
            f"‚ö†Ô∏è –ù–∞–∑–Ω–∞—á—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä–∫–æ–º.",
            parse_mode="Markdown",
            reply_markup=get_admin_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}",
            reply_markup=get_admin_menu()
        )
        await state.clear()

@router.callback_query(StateFilter(AdminState.waiting_for_vehicle_assignment))
async def process_vehicle_assignment(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if not callback.data or not callback.data.startswith("assign_vehicle_"):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        return
    
    vehicle_id = int(callback.data.replace("assign_vehicle_", ""))
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
        driver_id = await db.create_driver(
            name=data['driver_name'],
            phone=data['driver_phone'],
            vehicle_id=vehicle_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        vehicle_info = await db.get_vehicle_info(vehicle_id)
        
        if callback.message:
            await callback.message.edit_text(
                f"‚úÖ **–í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"üë§ –ò–º—è: {data['driver_name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['driver_phone']}\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {vehicle_info['model'] if vehicle_info else '–û—à–∏–±–∫–∞'} ({vehicle_info['license_plate'] if vehicle_info else 'N/A'})\n"
                f"üÜî ID: {driver_id}",
                parse_mode="Markdown"
            )
            
            await callback.message.answer(
                "–í–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=get_admin_menu()
            )
        
        await callback.answer("‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
        await state.clear()
        
    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
            )
            await callback.message.answer(
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                reply_markup=get_admin_menu()
            )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
        await state.clear()

@router.message(lambda message: message.text == "üöó –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
async def add_vehicle_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_menu())
        return
    
    await message.answer(
        "üöó **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Toyota Camry, Hyundai Solaris",
        parse_mode="Markdown",
        reply_markup=get_cancel_menu()
    )
    
    await state.set_state(AdminState.waiting_for_vehicle_model)

@router.message(StateFilter(AdminState.waiting_for_vehicle_model))
async def process_vehicle_model(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu())
        await state.clear()
        return
    
    if not message.text or len(message.text.strip()) < 2:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=get_cancel_menu()
        )
        return
    
    vehicle_model = message.text.strip()
    await state.update_data(vehicle_model=vehicle_model)
    
    await message.answer(
        f"‚úÖ –ú–æ–¥–µ–ª—å: {vehicle_model}\n\n"
        "üî¢ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê123–ë–í77, –í456–ì–î177",
        reply_markup=get_cancel_menu()
    )
    
    await state.set_state(AdminState.waiting_for_license_plate)

@router.message(StateFilter(AdminState.waiting_for_license_plate))
async def process_license_plate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu())
        await state.clear()
        return
    
    if not message.text or len(message.text.strip()) < 6:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:",
            reply_markup=get_cancel_menu()
        )
        return
    
    license_plate = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    existing_vehicle = await db.get_vehicle_by_license_plate(license_plate)
    if existing_vehicle:
        await message.answer(
            f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {license_plate} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n"
            f"üöó {existing_vehicle['model']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:",
            reply_markup=get_cancel_menu()
        )
        return
    
    data = await state.get_data()
    
    try:
        vehicle_id = await db.create_vehicle(
            model=data['vehicle_model'],
            license_plate=license_plate
        )
        
        await message.answer(
            f"‚úÖ **–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üöó –ú–æ–¥–µ–ª—å: {data['vehicle_model']}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {license_plate}\n"
            f"üÜî ID: {vehicle_id}\n\n"
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≥–æ—Ç–æ–≤ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –≤–æ–¥–∏—Ç–µ–ª—é.",
            parse_mode="Markdown",
            reply_markup=get_admin_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}",
            reply_markup=get_admin_menu()
        )
        await state.clear()

@router.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
async def show_drivers_list(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_menu())
        return
    
    drivers = await db.get_all_drivers()
    
    if not drivers:
        await message.answer(
            "üìã **–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç**\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ 'üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è'",
            parse_mode="Markdown",
            reply_markup=get_admin_menu()
        )
        return
    
    drivers_text = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:**\n\n"
    
    for i, driver in enumerate(drivers, 1):
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if driver['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        vehicle_info = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        
        if driver['vehicle_id']:
            vehicle = await db.get_vehicle_info(driver['vehicle_id'])
            if vehicle:
                vehicle_info = f"{vehicle['model']} ({vehicle['license_plate']})"
        
        drivers_text += (
            f"**{i}. {driver['name']}**\n"
            f"üì± {driver['phone']}\n"
            f"üöó {vehicle_info}\n"
            f"üìä {status}\n"
            f"üÜî ID: {driver['id']}\n\n"
        )
    
    await message.answer(drivers_text, parse_mode="Markdown", reply_markup=get_admin_menu())

@router.message(lambda message: message.text == "üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
async def show_vehicles_list(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_menu())
        return
    
    vehicles = await db.get_all_vehicles()
    
    if not vehicles:
        await message.answer(
            "üöó **–ê–≤—Ç–æ–ø–∞—Ä–∫ –ø—É—Å—Ç**\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —á–µ—Ä–µ–∑ 'üöó –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'",
            parse_mode="Markdown",
            reply_markup=get_admin_menu()
        )
        return
    
    vehicles_text = "üöó **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:**\n\n"
    
    for i, vehicle in enumerate(vehicles, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—é
        assigned_driver = await db.get_driver_by_vehicle_id(vehicle['id'])
        assignment_info = "–°–≤–æ–±–æ–¥–µ–Ω"
        
        if assigned_driver:
            assignment_info = f"–ù–∞–∑–Ω–∞—á–µ–Ω: {assigned_driver['name']}"
        
        condition_emoji = {
            'excellent': '‚úÖ',
            'good': 'üëç', 
            'satisfactory': '‚ö†Ô∏è',
            'needs_repair': 'üîß',
            'critical': 'üö®'
        }.get(vehicle.get('condition', 'good'), 'üëç')
        
        vehicles_text += (
            f"**{i}. {vehicle['model']}**\n"
            f"üî¢ {vehicle['license_plate']}\n"
            f"üë§ {assignment_info}\n"
            f"{condition_emoji} –°–æ—Å—Ç–æ—è–Ω–∏–µ: {vehicle.get('condition', '–•–æ—Ä–æ—à–µ–µ')}\n"
            f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {vehicle.get('fuel_level', 100)}%\n"
            f"üÜî ID: {vehicle['id']}\n\n"
        )
    
    await message.answer(vehicles_text, parse_mode="Markdown", reply_markup=get_admin_menu())

@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
async def show_system_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_menu())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_system_statistics()
    
    stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    
    stats_text += "üë• **–í–æ–¥–∏—Ç–µ–ª–∏:**\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_drivers', 0)}\n"
    stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_drivers', 0)}\n"
    stats_text += f"‚Ä¢ –ù–∞ —Å–º–µ–Ω–µ: {stats.get('drivers_on_shift', 0)}\n\n"
    
    stats_text += "üöó **–ê–≤—Ç–æ–ø–∞—Ä–∫:**\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –¢–°: {stats.get('total_vehicles', 0)}\n"
    stats_text += f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {stats.get('assigned_vehicles', 0)}\n"
    stats_text += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {stats.get('available_vehicles', 0)}\n\n"
    
    stats_text += "üì¶ **–î–æ—Å—Ç–∞–≤–∫–∏:**\n"
    stats_text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('deliveries_today', 0)}\n"
    stats_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats.get('completed_deliveries', 0)}\n"
    stats_text += f"‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('active_deliveries', 0)}\n\n"
    
    stats_text += "üîß **–û—Ç—á–µ—Ç—ã:**\n"
    stats_text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('reports_today', 0)}\n"
    stats_text += f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: {stats.get('problem_reports', 0)}\n"
    
    await message.answer(stats_text, parse_mode="Markdown", reply_markup=get_admin_menu())

@router.message(lambda message: message.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
async def exit_admin_panel(message: types.Message):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    await message.answer(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.",
        reply_markup=get_main_menu()
    )