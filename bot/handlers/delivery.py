from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from bot.states.driver_states import DeliveryState
from bot.keyboards.reply import get_main_menu, get_delivery_status_menu, get_cancel_menu, get_confirmation_menu
from bot.utils.database import Database
from datetime import datetime

router = Router()
db = Database()

@router.message(lambda message: message.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞")
async def delivery_menu(message: types.Message):
    """–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã
    active_shift = await db.get_active_shift(user_id)
    if not active_shift:
        await message.answer(
            "‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üöÄ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    active_deliveries = await db.get_active_deliveries(user_id)
    pending_deliveries = await db.get_pending_deliveries(user_id)
    
    menu_text = "üöö **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏**\n\n"
    
    if active_deliveries:
        menu_text += f"üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {len(active_deliveries)}\n"
        for delivery in active_deliveries[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            menu_text += f"‚Ä¢ #{delivery['id']} - {delivery['address'][:30]}...\n"
    
    if pending_deliveries:
        menu_text += f"\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {len(pending_deliveries)}\n"
        for delivery in pending_deliveries[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            menu_text += f"‚Ä¢ #{delivery['id']} - {delivery['address'][:30]}...\n"
    
    if not active_deliveries and not pending_deliveries:
        menu_text += "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.\n"
    
    menu_text += "\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    if pending_deliveries:
        keyboard.append([types.KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")])
    
    if active_deliveries:
        keyboard.append([types.KeyboardButton(text="üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")])
        keyboard.append([types.KeyboardButton(text="üì∏ –§–æ—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏")])
    
    keyboard.extend([
        [types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫"), types.KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫")],
        [types.KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ])
    
    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer(menu_text, parse_mode="Markdown", reply_markup=reply_markup)

@router.message(lambda message: message.text == "üöÄ –ù–∞—á–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
async def start_delivery(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    pending_deliveries = await db.get_pending_deliveries(user_id)
    if not pending_deliveries:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    deliveries_text = "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞:**\n\n"
    
    for i, delivery in enumerate(pending_deliveries, 1):
        deliveries_text += (
            f"{i}. **–ó–∞–∫–∞–∑ #{delivery['id']}**\n"
            f"üìç {delivery['address']}\n"
            f"üì¶ {delivery.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"üí∞ {delivery.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    deliveries_text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1) –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"
    
    await state.update_data(pending_deliveries=pending_deliveries)
    await message.answer(deliveries_text, parse_mode="Markdown", reply_markup=get_cancel_menu())
    await state.set_state(DeliveryState.waiting_for_address_confirmation)

@router.message(StateFilter(DeliveryState.waiting_for_address_confirmation))
async def confirm_delivery_address(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –ù–∞—á–∞–ª–æ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    try:
        if not message.text:
            raise ValueError("Empty text")
        delivery_index = int(message.text.strip()) - 1
        data = await state.get_data()
        pending_deliveries = data['pending_deliveries']
        
        if delivery_index < 0 or delivery_index >= len(pending_deliveries):
            raise ValueError("Invalid index")
            
        selected_delivery = pending_deliveries[delivery_index]
        
    except (ValueError, IndexError):
        pending_count = len(await db.get_pending_deliveries(message.from_user.id)) if message.from_user else 0
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ "
            f"{pending_count}:",
            reply_markup=get_cancel_menu()
        )
        return
    
    await state.update_data(selected_delivery=selected_delivery)
    
    confirmation_text = (
        f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –¥–æ—Å—Ç–∞–≤–∫–∏:**\n\n"
        f"üÜî –ó–∞–∫–∞–∑: #{selected_delivery['id']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {selected_delivery['address']}\n"
        f"üì¶ –¢–æ–≤–∞—Ä—ã: {selected_delivery.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"üí∞ –°—É–º–º–∞: {selected_delivery.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –ö–ª–∏–µ–Ω—Ç: {selected_delivery.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
    )
    
    await message.answer(confirmation_text, parse_mode="Markdown", reply_markup=get_confirmation_menu())

@router.message(lambda message: message.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"] and message.reply_markup)
async def process_delivery_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("‚ùå –ù–∞—á–∞–ª–æ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    data = await state.get_data()
    delivery = data['selected_delivery']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ "–≤ –ø—É—Ç–∏"
    if message.from_user:
        await db.start_delivery(delivery['id'], message.from_user.id)
    
    await message.answer(
        "üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–æ–≤–∞—Ä–æ–º):\n"
        "–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –Ω–∞—á–∞–ª–æ –¥–æ—Å—Ç–∞–≤–∫–∏.",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(DeliveryState.waiting_for_departure_photo)

@router.message(StateFilter(DeliveryState.waiting_for_departure_photo))
async def process_departure_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
            reply_markup=get_cancel_menu()
        )
        return
    
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    delivery = data['selected_delivery']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await db.save_delivery_photo(delivery['id'], photo_id, 'departure')
    
    await message.answer(
        f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery['id']} –Ω–∞—á–∞—Ç–∞!\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {delivery['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {delivery.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üöö –î–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–ª–∏–µ–Ω—Ç—É!",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@router.message(lambda message: message.text == "üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def update_delivery_status(message: types.Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    active_deliveries = await db.get_active_deliveries(user_id)
    
    if not active_deliveries:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ï—Å–ª–∏ –æ–¥–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞—Ç—É—Å—É
    if len(active_deliveries) == 1:
        delivery = active_deliveries[0]
        await state.update_data(selected_delivery=delivery)
        await message.answer(
            f"üìã **–î–æ—Å—Ç–∞–≤–∫–∞ #{delivery['id']}**\n"
            f"üìç {delivery['address']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            parse_mode="Markdown",
            reply_markup=get_delivery_status_menu()
        )
        await state.set_state(DeliveryState.waiting_for_delivery_status)
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–æ–∫ - –≤—ã–±–∏—Ä–∞–µ–º
    deliveries_text = "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**\n\n"
    
    for i, delivery in enumerate(active_deliveries, 1):
        deliveries_text += (
            f"{i}. **#{delivery['id']}** - {delivery['address'][:40]}\n"
            f"   –°—Ç–∞—Ç—É—Å: {delivery['status']}\n"
        )
    
    deliveries_text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏:"
    
    await state.update_data(active_deliveries=active_deliveries)
    await message.answer(deliveries_text, parse_mode="Markdown", reply_markup=get_cancel_menu())

@router.message(StateFilter(DeliveryState.waiting_for_delivery_status))
async def process_delivery_status(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    status_map = {
        "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ": "delivered",
        "‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ": "failed",
        "üîÑ –ü–µ—Ä–µ–Ω–æ—Å –¥–æ—Å—Ç–∞–≤–∫–∏": "rescheduled", 
        "üö´ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞": "cancelled"
    }
    
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if message.text not in status_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
            reply_markup=get_delivery_status_menu()
        )
        return
    
    data = await state.get_data()
    delivery = data['selected_delivery']
    new_status = status_map[message.text]
    
    await state.update_data(new_status=new_status)
    
    if new_status == "delivered":
        await message.answer(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞.",
            reply_markup=get_cancel_menu()
        )
        await state.set_state(DeliveryState.waiting_for_delivery_photo)
    elif new_status in ["failed", "rescheduled", "cancelled"]:
        await message.answer(
            "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
            reply_markup=get_cancel_menu()
        )
        await state.set_state(DeliveryState.waiting_for_return_reason)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await db.update_delivery_status(delivery['id'], new_status)
        await message.answer(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ #{delivery['id']} –æ–±–Ω–æ–≤–ª–µ–Ω: {message.text}",
            reply_markup=get_main_menu()
        )
        await state.clear()

@router.message(StateFilter(DeliveryState.waiting_for_delivery_photo))
async def process_delivery_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            reply_markup=get_cancel_menu()
        )
        return
    
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    delivery = data['selected_delivery']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.save_delivery_photo(delivery['id'], photo_id, 'delivery')
    await db.update_delivery_status(delivery['id'], data['new_status'])
    
    await message.answer(
        f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery['id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì∏ –§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëè",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@router.message(StateFilter(DeliveryState.waiting_for_return_reason))
async def process_return_reason(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞/–ø–µ—Ä–µ–Ω–æ—Å–∞"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:",
            reply_markup=get_cancel_menu()
        )
        return
    
    reason = message.text.strip()
    if len(reason) < 5:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–∏—á–∏–Ω—É (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_cancel_menu()
        )
        return
    
    data = await state.get_data()
    delivery = data['selected_delivery']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø—Ä–∏—á–∏–Ω–æ–π
    await db.update_delivery_status(delivery['id'], data['new_status'], reason)
    
    status_text = {
        "failed": "‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
        "rescheduled": "üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ",
        "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
    }
    
    await message.answer(
        f"‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ #{delivery['id']} –æ–±–Ω–æ–≤–ª–µ–Ω: {status_text[data['new_status']]}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@router.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫")
async def show_deliveries_list(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∞–≤–æ–∫"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    all_deliveries = await db.get_all_driver_deliveries(user_id)
    
    if not all_deliveries:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    pending = [d for d in all_deliveries if d['status'] == 'pending']
    active = [d for d in all_deliveries if d['status'] == 'in_progress']  
    completed = [d for d in all_deliveries if d['status'] == 'delivered']
    failed = [d for d in all_deliveries if d['status'] in ['failed', 'cancelled', 'rescheduled']]
    
    list_text = "üìã **–í—Å–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:**\n\n"
    
    if pending:
        list_text += f"‚è≥ **–û–∂–∏–¥–∞—é—â–∏–µ ({len(pending)}):**\n"
        for d in pending[:5]:
            list_text += f"‚Ä¢ #{d['id']} - {d['address'][:30]}...\n"
        if len(pending) > 5:
            list_text += f"... –∏ –µ—â–µ {len(pending) - 5}\n"
        list_text += "\n"
    
    if active:
        list_text += f"üî• **–ê–∫—Ç–∏–≤–Ω—ã–µ ({len(active)}):**\n"
        for d in active:
            list_text += f"‚Ä¢ #{d['id']} - {d['address'][:30]}...\n"
        list_text += "\n"
    
    if completed:
        list_text += f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ ({len(completed)}):**\n"
        for d in completed[:3]:
            list_text += f"‚Ä¢ #{d['id']} - {d['address'][:30]}...\n"
        if len(completed) > 3:
            list_text += f"... –∏ –µ—â–µ {len(completed) - 3}\n"
        list_text += "\n"
    
    if failed:
        list_text += f"‚ùå **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ ({len(failed)}):**\n"
        for d in failed[:3]:
            list_text += f"‚Ä¢ #{d['id']} - {d['address'][:30]}...\n"
        if len(failed) > 3:
            list_text += f"... –∏ –µ—â–µ {len(failed) - 3}\n"
    
    await message.answer(list_text, parse_mode="Markdown", reply_markup=get_main_menu())
