from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from bot.states.driver_states import ShiftState
from bot.keyboards.reply import get_main_menu, get_vehicle_condition_menu, get_cancel_menu
from bot.utils.database import Database
from bot.utils.validators import validate_mileage
from datetime import datetime

router = Router()
db = Database()

@router.message(lambda message: message.text == "üöÄ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")
async def start_shift(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É
    active_shift = await db.get_active_shift(user_id)
    if active_shift:
        await message.answer(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞, –Ω–∞—á–∞—Ç–∞—è {active_shift['start_time']}\n"
            f"–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.",
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–º–µ–Ω—ã.\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(ShiftState.waiting_for_start_photo)

@router.message(StateFilter(ShiftState.waiting_for_start_photo))
async def process_start_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=get_cancel_menu()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    await state.update_data(start_photo=photo_id)
    
    await message.answer(
        "üöó –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 12345",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(ShiftState.waiting_for_mileage_start)

@router.message(StateFilter(ShiftState.waiting_for_mileage_start))
async def process_start_mileage(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø—Ä–æ–±–µ–≥–∞ –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.text or not validate_mileage(message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–±–µ–≥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 12345",
            reply_markup=get_cancel_menu()
        )
        return
    
    mileage_start = int(message.text.strip())
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
    shift_id = await db.create_shift(
        user_id=user_id,
        start_photo=data['start_photo'],
        mileage_start=mileage_start
    )
    
    await message.answer(
        f"‚úÖ –°–º–µ–Ω–∞ ‚Ññ{shift_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!\n\n"
        f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%H:%M %d.%m.%Y')}\n"
        f"üöó –ü—Ä–æ–±–µ–≥: {mileage_start} –∫–º\n\n"
        f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üöö",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@router.message(lambda message: message.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É")
async def end_shift(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É
    active_shift = await db.get_active_shift(user_id)
    if not active_shift:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_main_menu()
        )
        return
    
    await state.update_data(shift_id=active_shift['id'])
    
    await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã:\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(ShiftState.waiting_for_end_photo)

@router.message(StateFilter(ShiftState.waiting_for_end_photo))
async def process_end_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=get_cancel_menu()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    await state.update_data(end_photo=photo_id)
    
    await message.answer(
        "üöó –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 12450",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(ShiftState.waiting_for_mileage_end)

@router.message(StateFilter(ShiftState.waiting_for_mileage_end))
async def process_end_mileage(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø—Ä–æ–±–µ–≥–∞ –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.text or not validate_mileage(message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–±–µ–≥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 12450",
            reply_markup=get_cancel_menu()
        )
        return
    
    mileage_end = int(message.text.strip())
    data = await state.get_data()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞
    shift_info = await db.get_shift_info(data['shift_id'])
    if shift_info and mileage_end <= shift_info['mileage_start']:
        await message.answer(
            f"‚ùå –ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–±–µ–≥ ({mileage_end} –∫–º) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—å–Ω–æ–º—É ({shift_info['mileage_start'] if shift_info else 0} –∫–º).\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_cancel_menu()
        )
        return
    
    await state.update_data(mileage_end=mileage_end)
    
    await message.answer(
        "üöó –û—Ü–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã:",
        reply_markup=get_vehicle_condition_menu()
    )
    await state.set_state(ShiftState.waiting_for_vehicle_condition)

@router.message(StateFilter(ShiftState.waiting_for_vehicle_condition))
async def process_vehicle_condition(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    valid_conditions = ["‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ", "üëç –•–æ—Ä–æ—à–µ–µ", "‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "‚ùå –¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞"]
    
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if message.text not in valid_conditions:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_vehicle_condition_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    condition_map = {
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ": "excellent",
        "üëç –•–æ—Ä–æ—à–µ–µ": "good", 
        "‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": "satisfactory",
        "‚ùå –¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞": "needs_repair"
    }
    
    vehicle_condition = condition_map[message.text]
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
    await db.end_shift(
        shift_id=data['shift_id'],
        end_photo=data['end_photo'],
        mileage_end=data['mileage_end'],
        vehicle_condition=vehicle_condition
    )
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    distance = data['mileage_end'] - await db.get_shift_start_mileage(data['shift_id'])
    shift_info = await db.get_shift_info(data['shift_id'])
    if not shift_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ.", reply_markup=get_main_menu())
        await state.clear()
        return
    duration = datetime.now() - datetime.fromisoformat(shift_info['start_time'])
    
    await message.answer(
        f"‚úÖ –°–º–µ–Ω–∞ ‚Ññ{data['shift_id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω—ã:\n"
        f"‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
        f"üõ£Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ: {distance} –∫–º\n"
        f"üöó –°–æ—Å—Ç–æ—è–Ω–∏–µ –¢–°: {message.text}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! üëè",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@router.message(lambda message: message.text == "üìä –ú–æ–∏ —Å–º–µ–Ω—ã")
async def show_shifts_history(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—è"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    shifts = await db.get_driver_shifts(user_id, limit=10)
    
    if not shifts:
        await message.answer(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å–º–µ–Ω—É –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
            reply_markup=get_main_menu()
        )
        return
    
    shifts_text = "üìä **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–º–µ–Ω—ã:**\n\n"
    
    for shift in shifts:
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if shift['end_time'] is None else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        duration = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" if shift['end_time'] is None else str(
            datetime.fromisoformat(shift['end_time']) - datetime.fromisoformat(shift['start_time'])
        )
        distance = "‚Äî" if shift['mileage_end'] is None else f"{shift['mileage_end'] - shift['mileage_start']} –∫–º"
        
        shifts_text += (
            f"**–°–º–µ–Ω–∞ #{shift['id']}** {status}\n"
            f"üìÖ {datetime.fromisoformat(shift['start_time']).strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
            f"üõ£Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ: {distance}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    await message.answer(shifts_text, parse_mode="Markdown", reply_markup=get_main_menu())
