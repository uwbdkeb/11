from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from bot.states.driver_states import VehicleState
from bot.keyboards.reply import get_main_menu, get_cancel_menu
from bot.utils.database import Database
from bot.utils.validators import validate_fuel_level
from datetime import datetime

router = Router()
db = Database()

@router.message(lambda message: message.text == "üöó –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
async def vehicle_menu(message: types.Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    driver_info = await db.get_driver_info(user_id)
    vehicle_info = await db.get_vehicle_info(driver_info['vehicle_id']) if driver_info and driver_info.get('vehicle_id') else None
    
    menu_text = "üöó **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º**\n\n"
    
    if vehicle_info:
        menu_text += (
            f"üöô **–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å:**\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {vehicle_info['model']}\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: {vehicle_info['license_plate']}\n"
            f"‚Ä¢ –ü—Ä–æ–±–µ–≥: {vehicle_info.get('current_mileage', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–º\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {vehicle_info.get('condition', '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ')}\n\n"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        recent_reports = await db.get_recent_vehicle_reports(vehicle_info['id'], limit=3)
        if recent_reports:
            menu_text += "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:**\n"
            for report in recent_reports:
                report_date = datetime.fromisoformat(report['created_at']).strftime('%d.%m %H:%M')
                menu_text += f"‚Ä¢ {report_date} - {report['report_type']}: {report['status']}\n"
    else:
        menu_text += "‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
    
    menu_text += "\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [types.KeyboardButton(text="üì∏ –§–æ—Ç–æ –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ"), types.KeyboardButton(text="‚õΩ –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞")],
        [types.KeyboardButton(text="üîß –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ"), types.KeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤")],
        [types.KeyboardButton(text="üöó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–µ–∑–¥–æ–º"), types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–°")],
        [types.KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    
    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer(menu_text, parse_mode="Markdown", reply_markup=reply_markup)

@router.message(lambda message: message.text == "üì∏ –§–æ—Ç–æ –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ")
async def parking_photo_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    driver_info = await db.get_driver_info(user_id)
    if not driver_info or not driver_info.get('vehicle_id'):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ.\n\n"
        "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ —á–µ—Ç–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
        "‚Ä¢ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "‚Ä¢ –ù–æ–º–µ—Ä–Ω–æ–π –∑–Ω–∞–∫\n"
        "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–°:",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(VehicleState.waiting_for_parking_photo)

@router.message(StateFilter(VehicleState.waiting_for_parking_photo))
async def process_parking_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=get_cancel_menu()
        )
        return
    
    photo_id = message.photo[-1].file_id
    if not message.from_user:
        return
    user_id = message.from_user.id
    driver_info = await db.get_driver_info(user_id)
    
    if not driver_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ –ø–∞—Ä–∫–æ–≤–∫–µ
    await db.create_vehicle_report(
        vehicle_id=driver_info['vehicle_id'],
        driver_id=driver_info['id'],
        report_type='parking',
        photo_id=photo_id,
        status='documented'
    )
    
    await message.answer(
        "‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        "üì∏ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã! üëè",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@router.message(lambda message: message.text == "‚õΩ –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞")
async def fuel_level_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–∫–∞–∑–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ç–æ–ø–ª–∏–≤–∞"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    driver_info = await db.get_driver_info(user_id)
    if not driver_info or not driver_info.get('vehicle_id'):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "‚õΩ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 85 (–¥–ª—è 85%)\n"
        "‚Ä¢ 50 (–¥–ª—è –ø–æ–ª–æ–≤–∏–Ω—ã –±–∞–∫–∞)\n"
        "‚Ä¢ 15 (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è)\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(VehicleState.waiting_for_fuel_level)

@router.message(StateFilter(VehicleState.waiting_for_fuel_level))
async def process_fuel_level(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —Ç–æ–ø–ª–∏–≤–∞"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –û—Ç—á–µ—Ç –æ —Ç–æ–ø–ª–∏–≤–µ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.text or not validate_fuel_level(message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 75",
            reply_markup=get_cancel_menu()
        )
        return
    
    fuel_level = int(message.text.strip())
    if not message.from_user:
        return
    user_id = message.from_user.id
    driver_info = await db.get_driver_info(user_id)
    
    if not driver_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É—Ä–æ–≤–Ω—é —Ç–æ–ø–ª–∏–≤–∞
    if fuel_level >= 75:
        status = "excellent"
        status_text = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
    elif fuel_level >= 50:
        status = "good"  
        status_text = "üëç –•–æ—Ä–æ—à–æ"
    elif fuel_level >= 25:
        status = "low"
        status_text = "‚ö†Ô∏è –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
    else:
        status = "critical"
        status_text = "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ —Ç–æ–ø–ª–∏–≤–µ
    await db.create_vehicle_report(
        vehicle_id=driver_info['vehicle_id'],
        driver_id=driver_info['id'],
        report_type='fuel',
        status=status,
        notes=f"–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞: {fuel_level}%"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    if driver_info['vehicle_id']:
        await db.update_vehicle_fuel(driver_info['vehicle_id'], fuel_level)
    
    response_text = (
        f"‚õΩ –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {fuel_level}%\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
    )
    
    if fuel_level < 25:
        response_text += "üö® **–í–Ω–∏–º–∞–Ω–∏–µ!** –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—Ä–∞–≤–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
    elif fuel_level < 50:
        response_text += "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–º —Ç–æ–ø–ª–∏–≤–∞.\n\n"
    
    response_text += "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
    
    await message.answer(response_text, parse_mode="Markdown", reply_markup=get_main_menu())
    await state.clear()

@router.message(lambda message: message.text == "üîß –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ")
async def damage_report_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª–æ–º–∫–µ"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    driver_info = await db.get_driver_info(user_id)
    if not driver_info or not driver_info.get('vehicle_id'):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üîß **–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º**\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É:\n"
        "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?\n"
        "‚Ä¢ –í–ª–∏—è–µ—Ç –ª–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=get_cancel_menu()
    )
    await state.set_state(VehicleState.waiting_for_damage_report)

@router.message(StateFilter(VehicleState.waiting_for_damage_report))
async def process_damage_report(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª–æ–º–∫–µ"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª–æ–º–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
            reply_markup=get_cancel_menu()
        )
        return
    
    damage_description = message.text.strip()
    if len(damage_description) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_cancel_menu()
        )
        return
    
    if not message.from_user:
        return
    user_id = message.from_user.id
    driver_info = await db.get_driver_info(user_id)
    
    if not driver_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–ª–æ–º–∫–µ
    report_id = await db.create_vehicle_report(
        vehicle_id=driver_info['vehicle_id'],
        driver_id=driver_info['id'],
        report_type='damage',
        status='needs_repair',
        notes=damage_description
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # await notify_admins_about_damage(driver_info, damage_description)
    
    await message.answer(
        f"üîß **–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª–æ–º–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
        f"üìã –ù–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞: #{report_id}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {damage_description[:100]}...\n\n"
        f"üö® **–í–∞–∂–Ω–æ!** –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - "
        f"–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.\n\n"
        f"‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@router.message(lambda message: message.text == "üöó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–µ–∑–¥–æ–º")
async def pre_trip_inspection(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –≤—ã–µ–∑–¥–æ–º"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    driver_info = await db.get_driver_info(user_id)
    if not driver_info or not driver_info.get('vehicle_id'):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    vehicle_info = await db.get_vehicle_info(driver_info['vehicle_id'])
    if not vehicle_info:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.",
            reply_markup=get_main_menu()
        )
        return
    recent_reports = await db.get_recent_vehicle_reports(vehicle_info['id'], limit=5)
    
    inspection_text = "üöó **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–µ–∑–¥–æ–º**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    inspection_text += (
        f"üöô **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {vehicle_info['model']}\n"
        f"üî¢ **–ù–æ–º–µ—Ä:** {vehicle_info['license_plate']}\n"
        f"üìä **–ü—Ä–æ–±–µ–≥:** {vehicle_info.get('current_mileage', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–º\n\n"
    )
    
    # –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    inspection_text += "üìã **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:**\n"
    checklist = [
        "‚úÖ –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω",
        "‚úÖ –î–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∏–Ω–∞—Ö –≤ –Ω–æ—Ä–º–µ", 
        "‚úÖ –†–∞–±–æ—Ç–∞—é—Ç —Ñ–∞—Ä—ã –∏ –≥–∞–±–∞—Ä–∏—Ç—ã",
        "‚úÖ –ò—Å–ø—Ä–∞–≤–Ω—ã —Ç–æ—Ä–º–æ–∑–∞",
        "‚úÖ –ß–∏—Å—Ç—ã–µ –∑–µ—Ä–∫–∞–ª–∞ –∏ —Å—Ç–µ–∫–ª–∞",
        "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
        "‚úÖ –ê–ø—Ç–µ—á–∫–∞ –∏ –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ",
        "‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"
    ]
    
    for item in checklist:
        inspection_text += f"‚Ä¢ {item}\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    if recent_reports:
        inspection_text += "\nüìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:**\n"
        for report in recent_reports[:3]:
            report_date = datetime.fromisoformat(report['created_at']).strftime('%d.%m %H:%M')
            status_emoji = {"excellent": "‚úÖ", "good": "üëç", "needs_repair": "üîß", "critical": "üö®"}.get(report['status'], "üìù")
            inspection_text += f"‚Ä¢ {status_emoji} {report_date} - {report['report_type']}\n"
    
    inspection_text += (
        f"\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n"
        f"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.\n"
        f"–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîß –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ'."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = [
        [types.KeyboardButton(text="‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")],
        [types.KeyboardButton(text="‚õΩ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ø–ª–∏–≤–æ"), types.KeyboardButton(text="üîß –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞")],
        [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    
    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer(inspection_text, parse_mode="Markdown", reply_markup=reply_markup)

@router.message(lambda message: message.text == "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
async def confirm_pre_trip_inspection(message: types.Message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    driver_info = await db.get_driver_info(user_id)
    
    if not driver_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.", reply_markup=get_main_menu())
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–µ–¥—Ä–µ–π—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    await db.create_vehicle_report(
        vehicle_id=driver_info['vehicle_id'],
        driver_id=driver_info['id'],
        report_type='pre_trip_inspection',
        status='excellent',
        notes='–ü—Ä–µ–¥—Ä–µ–π—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    )
    
    await message.answer(
        "‚úÖ **–ü—Ä–µ–¥—Ä–µ–π—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
        "üìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "–ñ–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–æ—Ä–æ–≥–∏! üõ£Ô∏è",
        reply_markup=get_main_menu()
    )

@router.message(lambda message: message.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤")
async def show_vehicle_reports_history(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    driver_info = await db.get_driver_info(user_id)
    if not driver_info or not driver_info.get('vehicle_id'):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
            reply_markup=get_main_menu()
        )
        return
    
    reports = await db.get_recent_vehicle_reports(driver_info['vehicle_id'], limit=15)
    
    if not reports:
        await message.answer(
            "üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!",
            reply_markup=get_main_menu()
        )
        return
    
    history_text = "üìã **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é:**\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    report_types = {}
    for report in reports:
        report_type = report['report_type']
        if report_type not in report_types:
            report_types[report_type] = []
        report_types[report_type].append(report)
    
    type_names = {
        'parking': 'üÖøÔ∏è –§–æ—Ç–æ –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ',
        'fuel': '‚õΩ –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞',
        'damage': 'üîß –ü–æ–ª–æ–º–∫–∏',
        'pre_trip_inspection': 'üöó –ü—Ä–µ–¥—Ä–µ–π—Å–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏',
        'maintenance': 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
    }
    
    for report_type, type_reports in report_types.items():
        type_name = type_names.get(report_type, report_type.title())
        history_text += f"**{type_name} ({len(type_reports)}):**\n"
        
        for report in type_reports[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            date = datetime.fromisoformat(report['created_at']).strftime('%d.%m %H:%M')
            status_emoji = {
                "excellent": "‚úÖ", 
                "good": "üëç", 
                "satisfactory": "‚ö†Ô∏è",
                "needs_repair": "üîß", 
                "critical": "üö®",
                "documented": "üì∏"
            }.get(report['status'], "üìù")
            
            history_text += f"‚Ä¢ {status_emoji} {date}"
            if report.get('notes'):
                notes_preview = report['notes'][:30] + "..." if len(report['notes']) > 30 else report['notes']
                history_text += f" - {notes_preview}"
            history_text += "\n"
        
        if len(type_reports) > 5:
            history_text += f"... –∏ –µ—â–µ {len(type_reports) - 5}\n"
        history_text += "\n"
    
    await message.answer(history_text, parse_mode="Markdown", reply_markup=get_main_menu())

@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–°")
async def show_vehicle_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    if not await db.is_driver_authorized(user_id):
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return
    
    driver_info = await db.get_driver_info(user_id)
    if not driver_info or not driver_info.get('vehicle_id'):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    vehicle_stats = await db.get_vehicle_statistics(driver_info['vehicle_id'])
    vehicle_info = await db.get_vehicle_info(driver_info['vehicle_id'])
    
    if not vehicle_info:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.",
            reply_markup=get_main_menu()
        )
        return
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {vehicle_info['license_plate']}**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    stats_text += "üöó **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
    stats_text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {vehicle_info['model']}\n"
    stats_text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {vehicle_info.get('current_mileage', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–º\n"
    stats_text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞: {vehicle_info.get('fuel_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}%\n"
    stats_text += f"‚Ä¢ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {vehicle_info.get('condition', '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ')}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    if vehicle_stats:
        stats_text += "üìã **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {vehicle_stats.get('total_reports', 0)}\n"
        stats_text += f"‚Ä¢ –û—Ç—á–µ—Ç–æ–≤ –æ –ø–∞—Ä–∫–æ–≤–∫–µ: {vehicle_stats.get('parking_reports', 0)}\n"
        stats_text += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ —Ç–æ–ø–ª–∏–≤–∞: {vehicle_stats.get('fuel_reports', 0)}\n"
        stats_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–ª–æ–º–∫–∞—Ö: {vehicle_stats.get('damage_reports', 0)}\n"
        stats_text += f"‚Ä¢ –ü—Ä–µ–¥—Ä–µ–π—Å–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {vehicle_stats.get('inspection_reports', 0)}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    recent_events = await db.get_recent_vehicle_events(driver_info['vehicle_id'], limit=5)
    if recent_events:
        stats_text += "üìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
        for event in recent_events:
            if event.get('created_at'):
                event_date = datetime.fromisoformat(event['created_at']).strftime('%d.%m %H:%M')
                event_type = event.get('event_type')
                event_emoji = {
                    'shift_start': 'üöÄ',
                    'shift_end': 'üèÅ', 
                    'delivery_start': 'üì¶',
                    'delivery_end': '‚úÖ',
                    'report_created': 'üìã'
                }.get(event_type if event_type else '', 'üìù')
                
                description = event.get('description', '–°–æ–±—ã—Ç–∏–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                stats_text += f"‚Ä¢ {event_emoji} {event_date} - {description}\n"
    
    await message.answer(stats_text, parse_mode="Markdown", reply_markup=get_main_menu())
