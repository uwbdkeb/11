import os
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import pytz
from flask import Flask

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_TOKEN")

MOSCOW_TZ = pytz.timezone("Europe/Moscow")
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
keyboard = [
    [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
    [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É")],
    [KeyboardButton("üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton("üìÖ –í—Ç–æ—Ä–Ω–∏–∫")],
    [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è")]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
def init_db():
    conn = sqlite3.connect('schedule.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS lessons (
        id INTEGER PRIMARY KEY,
        day TEXT,
        time TEXT,
        subject TEXT,
        classroom TEXT
    )''')
    if c.execute("SELECT COUNT(*) FROM lessons").fetchone()[0] == 0:
        examples = [
            ('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '09:00', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ê—É–¥. 205'),
            ('–≤—Ç–æ—Ä–Ω–∏–∫', '12:00', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ö–æ–º–ø. –∫–ª–∞—Å—Å'),
        ]
        c.executemany("INSERT INTO lessons VALUES (NULL, ?, ?, ?, ?)", examples)
    conn.commit()
    conn.close()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def get_schedule(day: str):
    conn = sqlite3.connect('schedule.db')
    c = conn.cursor()
    c.execute("SELECT time, subject, classroom FROM lessons WHERE day=? ORDER BY time", (day,))
    rows = c.fetchall()
    conn.close()

    if not rows:
        return f"–í {day} –ø–∞—Ä –Ω–µ—Ç üéâ"
    
    result = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.title()}:\n\n"
    for time, subject, classroom in rows:
        result += f"‚è∞ {time} ‚Äî {subject}\nüìç {classroom}\n\n"
    return result

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç")