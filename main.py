import os
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, timedelta
import pytz
from flask import Flask
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_TOKEN")

ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")

MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
keyboard = [
    [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
    [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É")],
    [KeyboardButton("üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton("üìÖ –í—Ç–æ—Ä–Ω–∏–∫")],
    [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è")]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
def init_db():
    conn = sqlite3.connect('schedule.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS lessons (
        id INTEGER PRIMARY KEY,
        day TEXT,
        time TEXT,
        subject TEXT,
        classroom TEXT
    )''')
    if c.execute("SELECT COUNT(*) FROM lessons").fetchone()[0] == 0:
        examples = [
            ('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '09:00', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ê—É–¥. 205'),
            ('–≤—Ç–æ—Ä–Ω–∏–∫', '12:00', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ö–æ–º–ø. –∫–ª–∞—Å—Å'),
        ]
        c.executemany("INSERT INTO lessons VALUES (NULL, ?, ?, ?, ?)", examples)
    conn.commit()
    conn.close()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def get_schedule(day: str):
    conn = sqlite3.connect('schedule.db')
    c = conn.cursor()
    c.execute("SELECT time, subject, classroom FROM lessons WHERE day=? ORDER BY time", (day,))
    rows = c.fetchall()
    conn.close()

    if not rows:
        return f"–í {day} –ø–∞—Ä –Ω–µ—Ç üéâ"
    
    result = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.title()}:\n\n"
    for time, subject, classroom in rows:
        result += f"‚è∞ {time} ‚Äî {subject}\nüìç {classroom}\n\n"
    return result

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º üìö\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—éüëá",
        reply_markup=reply_markup
    )

# === –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º ===
async def day_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().replace("üìÖ ", "")
    day_map = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞": "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥": "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞": "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞": "—Å—É–±–±–æ—Ç–∞",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        "—Å–µ–≥–æ–¥–Ω—è": "—Å–µ–≥–æ–¥–Ω—è"
    }
    weekday_map = {
        'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'wednesday': '—Å—Ä–µ–¥–∞',
        'thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'saturday': '—Å—É–±–±–æ—Ç–∞', 'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    target_day = day_map.get(text)
    if target_day == "—Å–µ–≥–æ–¥–Ω—è":
        target_day = weekday_map.get(datetime.now(MOSCOW_TZ).strftime('%A').lower())

    if target_day:
        await update.message.reply_text(get_schedule(target_day), reply_markup=reply_markup)

# === –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É ===
async def add_lesson_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ: –î–µ–Ω—å –í—Ä–µ–º—è –ü—Ä–µ–¥–º–µ—Ç –ö–∞–±–∏–Ω–µ—Ç\n"
        "–ü—Ä–∏–º–µ—Ä: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 09:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ê—É–¥. 205"
    )
    context.user_data['awaiting_lesson'] = True

async def handle_lesson_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_lesson'):
        try:
            parts = update.message.text.split(" ", 3)
            if len(parts) < 4:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
                return

            day, time, subject, classroom = [p.strip() for p in parts]
            day = day.lower()

            conn = sqlite3.connect('schedule.db')
            c = conn.cursor()
            c.execute("INSERT INTO lessons (day, time, subject, classroom) VALUES (?, ?, ?, ?)",
                      (day, time, subject, classroom))
            conn.commit()
            conn.close()

            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {day} –≤ {time} ‚Äî {subject}")
            context.user_data['awaiting_lesson'] = False
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    try:
        now = datetime.now(MOSCOW_TZ)
        target_time = (now + timedelta(minutes=15)).strftime('%H:%M')
        target_day = now.strftime('%A').lower()
        day_map = {
            'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'wednesday': '—Å—Ä–µ–¥–∞',
            'thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'saturday': '—Å—É–±–±–æ—Ç–∞', 'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        ru_day = day_map.get(target_day, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')

        conn = sqlite3.connect('schedule.db')
        c = conn.cursor()
        c.execute("SELECT subject, classroom FROM lessons WHERE day=? AND time=?", (ru_day, target_time))
        rows = c.fetchall()
        conn.close()

        for subject, classroom in rows:
            if ADMIN_USER_ID:
                await context.bot.send_message(
                    chat_id=ADMIN_USER_ID,
                    text=f"üîî –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç: {subject} –≤ {classroom}"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_reminders: {e}")

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive ===
app_flask = Flask(__name__)

@app_flask.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"

def run_flask():
    port = int(os.getenv("PORT", 8080))
    app_flask.run(host="0.0.0.0", port=port)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Job Queue ===
async def post_init(application: ApplicationBuilder) -> None:
    application.job_queue.run_repeating(send_reminders, interval=60, first=10)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    init_db()

    from threading import Thread
    Thread(target=run_flask, daemon=True).start()

    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É)$"), add_lesson_prompt))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üìÖ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–°—É–±–±–æ—Ç–∞|–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ|–°–µ–≥–æ–¥–Ω—è))$"), day_schedule))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_lesson_input))

    app.run_polling()